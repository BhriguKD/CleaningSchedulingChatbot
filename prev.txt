import os
import json
import traceback  # Added this line
import datetime
from datetime import datetime, timedelta
import google.generativeai as genai
from flask import Flask, request, jsonify, render_template
from dotenv import load_dotenv
from pathlib import Path

# Load environment variables
load_dotenv()

# Configure Gemini API
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))

# Initialize Flask app
app = Flask(__name__)

# Data storage (in a real app, use a database)
DATA_DIR = Path('data')
DATA_DIR.mkdir(exist_ok=True)
USER_DATA_FILE = DATA_DIR / 'user_data.json'


def load_user_data():
    try:
        if USER_DATA_FILE.exists():
            with open(USER_DATA_FILE, 'r') as f:
                return json.load(f)
        return {"users": {}}
    except (json.JSONDecodeError, IOError) as e:
        print(f"Error loading user data: {e}")
        return {"users": {}}


def save_user_data(data):
    try:
        with open(USER_DATA_FILE, 'w') as f:
            json.dump(data, f, indent=2)
        return True
    except IOError as e:
        print(f"Error saving user data: {e}")
        return False


# Initialize Gemini model
model = genai.GenerativeModel('gemini-2.0-flash')


def get_gemini_response(prompt):
    response = model.generate_content(prompt)
    return response.text


def extract_dates_from_text(text):
    """Simple date extraction logic - in a real app, use a more robust parser"""
    dates = []
    # This is a simplified version - would need more comprehensive parsing
    date_keywords = ['tomorrow', 'next week', 'on monday', 'tuesday', 'wednesday',
                     'thursday', 'friday', 'saturday', 'sunday']

    text_lower = text.lower()
    today = datetime.now()

    # Simple keyword matching
    if 'tomorrow' in text_lower:
        dates.append((today + timedelta(days=1)).strftime('%Y-%m-%d'))
    elif 'next week' in text_lower:
        dates.append((today + timedelta(days=7)).strftime('%Y-%m-%d'))

    # Day matching
    days = {'monday': 0, 'tuesday': 1, 'wednesday': 2, 'thursday': 3,
            'friday': 4, 'saturday': 5, 'sunday': 6}

    for day, day_num in days.items():
        if day in text_lower:
            # Calculate days until next occurrence of this day
            current_day_num = today.weekday()
            days_ahead = day_num - current_day_num
            if days_ahead <= 0:  # Target day already happened this week
                days_ahead += 7
            target_date = today + timedelta(days=days_ahead)
            dates.append(target_date.strftime('%Y-%m-%d'))

    return dates


def add_schedule(user_id, task, date):
    data = load_user_data()

    if user_id not in data['users']:
        data['users'][user_id] = {"schedules": []}

    data['users'][user_id]['schedules'].append({
        "task": task,
        "date": date,
        "created_at": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        "completed": False
    })

    save_user_data(data)
    return True


def get_schedules(user_id):
    data = load_user_data()
    if user_id in data['users']:
        return data['users'][user_id]['schedules']
    return []


def mark_completed(user_id, task_index):
    data = load_user_data()
    if user_id in data['users'] and task_index < len(data['users'][user_id]['schedules']):
        data['users'][user_id]['schedules'][task_index]['completed'] = True
        save_user_data(data)
        return True
    return False


def extract_schedule_from_message(message):
    prompt = f"""
    Extract cleaning task information from this message: "{message}"
    
    Respond in JSON format with these fields:
    - has_task: boolean
    - task: string (cleaning task description)
    - is_scheduling: boolean
    - date: string (YYYY-MM-DD format if mentioned)
    
    Example:
    {{
      "has_task": true,
      "task": "deep clean kitchen",
      "is_scheduling": true,
      "date": "2025-04-15"
    }}
    """

    try:
        response = get_gemini_response(prompt)
        return json.loads(response)
    except (json.JSONDecodeError, AttributeError) as e:
        print(f"Error parsing response: {e}")
        return {"has_task": False}


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/api/message', methods=['POST'])
def process_message():
    data = request.json
    user_id = data.get('user_id', 'default_user')
    message = data.get('message', '').strip().lower()

    # Check for schedule requests
    if 'show my schedule' in message or 'my tasks' in message:
        schedules = get_schedules(user_id)
        if not schedules:
            return jsonify({
                "response": "You don't have any scheduled cleanings yet.",
                "schedules": []
            })

        formatted = [
            {
                "id": idx+1,
                "task": s['task'],
                "date": s['date'],
                "completed": s['completed']
            }
            for idx, s in enumerate(schedules)
        ]
        return jsonify({
            "response": "Here are your scheduled cleanings:",
            "schedules": formatted
        })

    # Handle task completion
    if 'mark complete' in message or 'done' in message:
        try:
            task_num = int(''.join(filter(str.isdigit, message))) - 1
            if mark_completed(user_id, task_num):
                return jsonify({
                    "response": f"Marked task {task_num+1} as complete!",
                    "success": True
                })
        except (ValueError, IndexError):
            pass
        return jsonify({
            "response": "Couldn't find that task number. Please check your schedule.",
            "success": False
        })

    # Process new scheduling requests
    task_info = extract_schedule_from_message(message)
    if task_info.get('has_task') and task_info.get('is_scheduling'):
        task = task_info.get('task', 'Cleaning task')
        date = task_info.get('date') or extract_dates_from_text(message)

        if date:
            add_schedule(user_id, task, date[0]
                         if isinstance(date, list) else date)
            return jsonify({
                "response": f"Scheduled: '{task}' for {date}. Anything else?",
                "success": True
            })
        return jsonify({
            "response": "When would you like to schedule this cleaning?",
            "needs_date": True
        })

    # Default response
    response = get_gemini_response(f"""
    You're a cleaning scheduling assistant. The user said: "{message}"
    
    Respond concisely (1-2 sentences max). If they're trying to schedule something 
    but didn't specify when, ask "When would you like to schedule this?"
    """)

    return jsonify({"response": response})


@app.route('/api/export', methods=['GET'])
def export_data():
    user_id = request.args.get('user_id', 'default_user')
    data = load_user_data()

    schedules = data['users'].get(user_id, {}).get('schedules', [])
    return jsonify({
        "user_id": user_id,
        "schedules": schedules,
        "exported_at": datetime.now().isoformat()
    })

    # Add this to the end of app.py, before the "if __name__ == '__main__':" line


@app.route('/test_gemini')
def test_gemini():
    try:
        response = get_gemini_response("Say hello")
        return f"Gemini API test successful. Response: {response}"
    except Exception as e:
        return f"Gemini API test failed: {str(e)}\n{traceback.format_exc()}"


# Run the Flask app
if __name__ == '__main__':
    # Create templates directory and add index.html
    os.makedirs('templates', exist_ok=True)

    # Create a basic HTML template
    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Cleaning Scheduler</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
        <style>
            .schedule-item {
    background-color: #f8f9fa;
    border-radius: 4px;
}
.schedule-item:hover {
    background-color: #e9ecef;
}
            .chat-container {
                height: calc(100vh - 200px);
                overflow-y: auto;
            }
            .loading-dots:after {
                content: ' .';
                animation: dots 1s steps(5, end) infinite;
            }
            @keyframes dots {
                0%, 20% { content: ' .'; }
                40% { content: ' ..'; }
                60% { content: ' ...'; }
                80%, 100% { content: ''; }
            }
        </style>
    </head>
    <body class="bg-gray-100 h-screen">
        <div class="container mx-auto px-4 py-8 max-w-3xl">
            <header class="text-center mb-8">
                <h1 class="text-3xl font-bold text-indigo-700">Cleaning Scheduler Assistant</h1>
                <p class="text-gray-600">Let me help you keep your space clean and organized</p>
            </header>
            
            <div class="bg-white rounded-lg shadow-lg overflow-hidden">
                <div id="chat-container" class="chat-container p-4 bg-gray-50">
                    <div class="flex mb-4">
                        <div class="flex-shrink-0 mr-3">
                            <div class="w-10 h-10 rounded-full bg-indigo-500 flex items-center justify-center text-white font-bold">
                                CS
                            </div>
                        </div>
                        <div class="bg-indigo-100 rounded-lg py-2 px-4 max-w-md">
                            <p>Hi there! I'm your cleaning scheduler assistant. How can I help you today?</p>
                            <p class="text-xs text-gray-500 mt-1">Try saying "Schedule bathroom cleaning for next Tuesday" or "Show my schedule"</p>
                        </div>
                    </div>
                </div>
                
                <div class="border-t p-4 bg-white">
                    <div class="flex">
                        <input id="user-input" type="text" placeholder="Type your message here..." 
                            class="flex-grow border rounded-l-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <button id="send-btn" class="bg-indigo-600 text-white px-4 py-2 rounded-r-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            Send
                        </button>
                    </div>
                    <div class="flex justify-between mt-2">
                        <button id="show-schedule-btn" class="text-sm text-indigo-600 hover:text-indigo-800">Show Schedule</button>
                        <button id="export-btn" class="text-sm text-indigo-600 hover:text-indigo-800">Export Data</button>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            // Generate a random user ID for demo purposes (in production, use proper authentication)
            const userId = 'user_' + Math.random().toString(36).substring(2, 15);
            const chatContainer = document.getElementById('chat-container');
            const userInput = document.getElementById('user-input');
            const sendBtn = document.getElementById('send-btn');
            const showScheduleBtn = document.getElementById('show-schedule-btn');
            const exportBtn = document.getElementById('export-btn');
            
            // Add message to chat
            function addMessage(isUser, text) {
                const div = document.createElement('div');
                div.className = 'flex mb-4 ' + (isUser ? 'justify-end' : '');
                
                if (isUser) {
                    div.innerHTML = `
                        <div class="bg-indigo-600 text-white rounded-lg py-2 px-4 max-w-md">
                            <p>${text}</p>
                        </div>
                        <div class="flex-shrink-0 ml-3">
                            <div class="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center text-gray-700 font-bold">
                                You
                            </div>
                        </div>
                    `;
                } else {
                    div.innerHTML = `
                        <div class="flex-shrink-0 mr-3">
                            <div class="w-10 h-10 rounded-full bg-indigo-500 flex items-center justify-center text-white font-bold">
                                CS
                            </div>
                        </div>
                        <div class="bg-indigo-100 rounded-lg py-2 px-4 max-w-md">
                            <p>${text.replace(/\\n/g, '<br>')}</p>
                        </div>
                    `;
                }
                
                chatContainer.appendChild(div);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            // Add loading indicator
            function addLoadingIndicator() {
                const div = document.createElement('div');
                div.className = 'flex mb-4';
                div.id = 'loading-indicator';
                div.innerHTML = `
                    <div class="flex-shrink-0 mr-3">
                        <div class="w-10 h-10 rounded-full bg-indigo-500 flex items-center justify-center text-white font-bold">
                            CS
                        </div>
                    </div>
                    <div class="bg-indigo-100 rounded-lg py-2 px-4">
                        <p class="loading-dots">Thinking</p>
                    </div>
                `;
                chatContainer.appendChild(div);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            // Remove loading indicator
            function removeLoadingIndicator() {
                const loadingIndicator = document.getElementById('loading-indicator');
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
            }
            
            // Update the sendMessage function
async function sendMessage(message) {
    userInput.value = '';
    addMessage(true, message);
    addLoadingIndicator();
    
    try {
        const response = await fetch('/api/message', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({user_id: userId, message: message}),
        });
        
        const data = await response.json();
        removeLoadingIndicator();
        
        // Handle schedule display
        if (data.schedules) {
            let scheduleHtml = data.response + '<br><br>';
            data.schedules.forEach(s => {
                scheduleHtml += `
                <div class="schedule-item p-2 my-1 border-b">
                    <span class="font-medium">${s.id}. ${s.task}</span><br>
                    <span class="text-sm">Date: ${s.date}</span>
                    <button onclick="markComplete(${s.id-1})" 
                            class="float-right text-xs ${s.completed ? 'text-green-500' : 'text-blue-500'}">
                        ${s.completed ? '✓ Completed' : 'Mark Complete'}
                    </button>
                </div>`;
            });
            addMessage(false, scheduleHtml);
        } 
        // Handle normal responses
        else {
            addMessage(false, data.response);
        }
    } catch (error) {
        removeLoadingIndicator();
        addMessage(false, "Sorry, I encountered an error. Please try again.");
        console.error('Error:', error);
    }
}

// Add mark complete function
async function markComplete(taskIndex) {
    const response = await sendMessage(`mark complete task ${taskIndex+1}`);
}

// Update export function
async function exportData() {
    try {
        const response = await fetch(`/api/export?user_id=${userId}`);
        const data = await response.json();
        
        // Create download link
        const blob = new Blob([JSON.stringify(data, null, 2)], {type: 'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `cleaning_schedule_${userId}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
    } catch (error) {
        addMessage(false, "Failed to export data. Please try again.");
        console.error('Export error:', error);
    }
}
            
            // Event listeners
            sendBtn.addEventListener('click', () => {
                const message = userInput.value.trim();
                if (message) {
                    sendMessage(message);
                }
            });
            
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const message = userInput.value.trim();
                    if (message) {
                        sendMessage(message);
                    }
                }
            });
            
            showScheduleBtn.addEventListener('click', () => {
                sendMessage('Show my schedule');
            });
            
            exportBtn.addEventListener('click', exportData);
        </script>
    </body>
    </html>
    """

    with open('templates/index.html', 'w', encoding='utf-8') as f:
        f.write(html_content)

    app.run(debug=True)
